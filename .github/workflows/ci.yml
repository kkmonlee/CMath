name: Continuous Integration

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  test:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "Linux GCC x86-64 (AVX2)"
            os: ubuntu-latest
            compiler: gcc
            flags: "-O2 -g -Wall -Wextra -D_USE_MATH_DEFINES -lm -lpthread -mavx2 -mfma"

          - name: "Linux GCC x86-64 (Scalar Fallback)"
            os: ubuntu-latest
            compiler: gcc
            flags: "-O2 -g -Wall -Wextra -D_USE_MATH_DEFINES -lm -lpthread -DCM_HAVE_SCALAR=1"

          - name: "macOS Clang x86-64"
            os: macos-13
            compiler: clang
            flags: "-O2 -g -Wall -Wextra -D_USE_MATH_DEFINES -lm -lpthread -mavx2 -mfma"

          - name: "Windows MSVC x64"
            os: windows-latest
            compiler: msvc
            flags: "/EHsc /O2 /W4 /D_USE_MATH_DEFINES"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # FIX: Added this step to correctly set up the MSVC environment on Windows
      - name: Setup MSVC developer command prompt
        if: runner.os == 'Windows'
        uses: microsoft/setup-msvc-dev-cmd@v1

      - name: Run Linux/macOS tests
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: |
          ${{ matrix.compiler }} ${{ matrix.flags }} -o test_runner test/test_cmath.c
          ./test_runner

      - name: Run Windows MSVC tests
        if: runner.os == 'Windows'
        run: |
          cl ${{ matrix.flags }} /Fe:test_runner.exe test/test_cmath.c
          ./test_runner.exe

  test-aarch64:
    name: "Linux GCC AArch64 (NEON)"
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU for multi-architecture builds
        uses: docker/setup-qemu-action@v3

      - name: Build and test in aarch64 container
        # FIX: Added --platform to force pull of arm64 image
        run: |
          docker run --platform linux/arm64 --rm -v ${{ github.workspace }}:/ws arm64v8/gcc:latest /bin/bash -c " \
            set -e && \
            cd /ws && \
            gcc -O2 -g -Wall -Wextra -D_USE_MATH_DEFINES -lm -lpthread -o test_runner test/test_cmath.c && \
            ./test_runner"