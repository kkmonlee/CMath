name: Continuous Integration

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  test:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    
    # This matrix defines all the different environments to test on.
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "Linux GCC x86-64 (AVX2)"
            os: ubuntu-latest
            compiler: gcc
            flags: "-O2 -g -Wall -Wextra -lm -lpthread -mavx2 -mfma"

          - name: "Linux GCC x86-64 (Scalar Fallback)"
            os: ubuntu-latest
            compiler: gcc
            flags: "-O2 -g -Wall -Wextra -lm -lpthread -D__x86_64__=0"

          - name: "macOS Clang x86-64"
            os: macos-13 # x86-64 version of macOS
            compiler: clang
            flags: "-O2 -g -Wall -Wextra -lm -lpthread -mavx2 -mfma"

          - name: "Windows MSVC x64"
            os: windows-latest
            compiler: msvc
            flags: "" # MSVC flags handled in step

    # 'steps' is indented to be a child of 'test'
    steps:
      # Each '-' starts a new step, indented under 'steps'
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Linux/macOS tests
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: |
          ${{ matrix.compiler }} ${{ matrix.flags }} -o test_runner test/test_cmath.c
          ./test_runner

      - name: Run Windows MSVC tests
        if: runner.os == 'Windows'
        # This shell provides access to the cl.exe compiler
        shell: msvc-developer-command-prompt-x64
        run: |
          cl /EHsc /O2 /W4 /Fe:test_runner.exe test/test_cmath.c
          ./test_runner.exe

  test-aarch64:
    name: "Linux GCC AArch64 (NEON)"
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU for multi-architecture builds
        uses: docker/setup-qemu-action@v3

      - name: Build and test in aarch64 container
        # This runs a command inside a Docker container that has the aarch64 GCC toolchain.
        run: |
          docker run --rm -v ${{ github.workspace }}:/ws arm64v8/gcc:latest /bin/bash -c " \
            set -e && \
            apt-get update && apt-get install -y libpthread-stubs0-dev && \
            cd /ws && \
            gcc -O2 -g -Wall -Wextra -lm -lpthread -o test_runner test/test_cmath.c && \
            ./test_runner"