name: Continuous Integration

on:
  push:
    branches: [ "master", "main" ]
  pull_request:
    branches: [ "master", "main" ]

env:
  CFLAGS_BASE: "-std=c99 -Wall -Wextra -O2 -g -D_USE_MATH_DEFINES"
  LDFLAGS_BASE: "-lm -lpthread"

jobs:
  # Test matrix for different platforms and SIMD configurations
  test-matrix:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86-64 with AVX2
          - name: "Linux GCC x86-64 (AVX2)"
            os: ubuntu-latest
            compiler: gcc
            simd_flags: "-mavx2 -mfma"

          # Linux x86-64 scalar fallback
          - name: "Linux GCC x86-64 (Scalar)"
            os: ubuntu-latest
            compiler: gcc
            simd_flags: "-DCM_HAVE_SCALAR=1"

          # macOS Apple Silicon with NEON
          - name: "macOS Apple Silicon (NEON)"
            os: macos-latest
            compiler: clang
            simd_flags: "-mcpu=native"

          # macOS Intel with AVX2
          - name: "macOS Intel x86-64 (AVX2)"
            os: macos-13
            compiler: clang
            simd_flags: "-mavx2 -mfma"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Show system info
        run: |
          echo "OS: $(uname -s) $(uname -m)"
          echo "Compiler: ${{ matrix.compiler }}"
          ${{ matrix.compiler }} --version

      - name: Build and run basic tests
        run: |
          cd test
          ${{ matrix.compiler }} ${{ env.CFLAGS_BASE }} ${{ matrix.simd_flags }} \
            -o test_basic test_cmath.c ../cmath.c ${{ env.LDFLAGS_BASE }}
          echo "Running basic tests..."
          timeout 30s ./test_basic || echo "Basic tests failed or timed out"

      - name: Build and run vectorized tests
        run: |
          cd test
          ${{ matrix.compiler }} ${{ env.CFLAGS_BASE }} ${{ matrix.simd_flags }} \
            -o test_vectorized test_vectorized.c ../cmath.c ${{ env.LDFLAGS_BASE }}
          echo "Running vectorized tests..."
          timeout 30s ./test_vectorized || echo "Vectorized tests failed or timed out"

      - name: Build examples
        run: |
          ${{ matrix.compiler }} ${{ env.CFLAGS_BASE }} ${{ matrix.simd_flags }} \
            -o example example.c cmath.c ${{ env.LDFLAGS_BASE }}
          echo "Example built successfully"

      - name: Build benchmark
        run: |
          ${{ matrix.compiler }} ${{ env.CFLAGS_BASE }} ${{ matrix.simd_flags }} \
            -o benchmark benchmark.c cmath.c ${{ env.LDFLAGS_BASE }}
          echo "Benchmark built successfully"

  # Windows MSVC build
  test-windows:
    name: "Windows MSVC x64"
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup MSVC developer command prompt
        uses: microsoft/setup-msvc-dev-cmd@v1

      - name: Build basic tests
        run: |
          cl /std:c11 /EHsc /O2 /W4 /D_USE_MATH_DEFINES /Fe:test_basic.exe test/test_cmath.c cmath.c
          echo "Basic test built successfully"

      - name: Build vectorized tests
        run: |
          cl /std:c11 /EHsc /O2 /W4 /D_USE_MATH_DEFINES /Fe:test_vectorized.exe test/test_vectorized.c cmath.c
          echo "Vectorized test built successfully"

      - name: Build example
        run: |
          cl /std:c11 /EHsc /O2 /W4 /D_USE_MATH_DEFINES /Fe:example.exe example.c cmath.c
          echo "Example built successfully"

  # AArch64 Linux in Docker (for NEON testing)
  test-aarch64:
    name: "Linux AArch64 (NEON)"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU for multi-architecture builds
        uses: docker/setup-qemu-action@v3

      - name: Build and test in aarch64 container
        run: |
          docker run --platform linux/arm64 --rm -v ${{ github.workspace }}:/ws arm64v8/gcc:latest /bin/bash -c "
            set -e
            cd /ws
            echo 'Building for AArch64 with NEON support...'

            gcc -std=c99 -Wall -Wextra -O2 -g -mcpu=native -o test/test_basic test/test_cmath.c cmath.c -lm -lpthread
            echo 'Basic test built successfully'

            gcc -std=c99 -Wall -Wextra -O2 -g -mcpu=native -o test/test_vectorized test/test_vectorized.c cmath.c -lm -lpthread
            echo 'Vectorized test built successfully'

            gcc -std=c99 -Wall -Wextra -O2 -g -mcpu=native -o example example.c cmath.c -lm -lpthread
            echo 'Example built successfully'

            # run quick test if possible (may hit pool exhaustion)
            timeout 30s ./test/test_vectorized || echo 'Tests completed with timeout or issues'
          "

  # Code quality and static analysis
  code-quality:
    name: "Code Quality"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install cppcheck
        run: sudo apt-get update && sudo apt-get install -y cppcheck

      - name: Run static analysis
        run: |
          echo "Running cppcheck..."
          cppcheck --enable=warning,style,performance,portability --std=c99 \
            --suppress=unusedFunction --suppress=missingIncludeSystem \
            cmath.c cmath.h cm_vector.h

      - name: Check code formatting
        run: |
          echo "Checking for basic code style issues..."
          # basic checks for consistent indentation and line endings
          if grep -l $'\r' *.c *.h 2>/dev/null; then
            echo "Warning: Found Windows line endings"
          fi
          echo "Code quality checks completed"